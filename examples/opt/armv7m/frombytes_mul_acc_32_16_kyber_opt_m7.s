.syntax unified
.cpu cortex-m4
.thumb

// q locate in the top half of the register
.macro plant_red q, qa, qinv, tmp
 mul \tmp, \tmp, \qinv
 // tmp*qinv mod 2^2n/ 2^n; in high half
 smlatt \tmp, \tmp, \q, \qa
 // result in high half
.endm

.macro doublebasemul_frombytes_asm_acc_32_16 rptr_tmp, rptr, bptr, zeta, poly0, poly1, poly3, res0, tmp, q, qa, qinv
  ldr \poly0, [\bptr], #8
  ldr \res0, [\rptr_tmp], #16 // @slothy:core

  smulwt \tmp, \zeta, \poly1
 smlabt \tmp, \tmp, \q, \qa
 smlatt \tmp, \poly0, \tmp, \res0
 smlabb \tmp, \poly0, \poly1, \tmp
  plant_red \q, \qa, \qinv, \tmp

  ldr \res0, [\rptr_tmp, #-12]
  smladx \res0, \poly0, \poly1, \res0
  plant_red \q, \qa, \qinv, \res0

  pkhtb \res0, \res0, \tmp, asr #16
  str \res0, [\rptr], #8

  neg \zeta, \zeta

  ldr \poly0, [\bptr, #-4]
  ldr \res0, [\rptr_tmp, #-8]

  smulwt \tmp, \zeta, \poly3
 smlabt \tmp, \tmp, \q, \qa
 smlatt \tmp, \poly0, \tmp, \res0
 smlabb \tmp, \poly0, \poly3, \tmp
  plant_red \q, \qa, \qinv, \tmp

  ldr \res0, [\rptr_tmp, #-4]
  smladx \res0, \poly0, \poly3, \res0
  plant_red \q, \qa, \qinv, \res0

  pkhtb \res0, \res0, \tmp, asr #16
  str \res0, [\rptr, #-4]
.endm

// reduce 2 registers
.macro deserialize aptr, tmp, tmp2, tmp3, t0, t1
 ldrb.w \tmp, [\aptr, #2]
 ldrh.w \tmp2, [\aptr, #3]
 ldrb.w \tmp3, [\aptr, #5]
 ldrh.w \t0, [\aptr], #6

 ubfx \t1, \t0, #12, #4
 ubfx \t0, \t0, #0, #12
 orr \t1, \t1, \tmp, lsl #4
 orr \t0, \t0, \t1, lsl #16
 // tmp is free now
 ubfx \t1, \tmp2, #12, #4
 ubfx \tmp, \tmp2, #0, #12
 orr \t1, \t1, \tmp3, lsl #4
 orr \t1, \tmp, \t1, lsl #16
.endm

// void frombytes_mul_asm_acc_32_16(int16_t *r, const int16_t *b, const unsigned char *c, const int32_t zetas[64], const int32_t *r_tmp)
.global frombytes_mul_asm_acc_32_16_opt_m7
.type frombytes_mul_asm_acc_32_16_opt_m7, %function
.align 2
frombytes_mul_asm_acc_32_16_opt_m7:
  push {r4-r11, r14}

  rptr     .req r0
  bptr     .req r1
  aptr     .req r2
  zetaptr  .req r3
  t0       .req r4
 t1       .req r5
 tmp      .req r6
 tmp2     .req r7
 tmp3     .req r8
 q        .req r9
 qa       .req r10
 qinv     .req r11
 zeta     .req r12
 ctr      .req r14
  rptr_tmp .req r3

  movw qa, #26632
 movt  q, #3329
 ### qinv=0x6ba8f301
 movw qinv, #62209
 movt qinv, #27560

  vmov s2, zetaptr
  ldr.w rptr_tmp, [sp, #9*4] // load rptr_tmp from stack
  vmov s1, rptr_tmp
  add ctr, rptr_tmp, #64*4*4
                                         // Instructions:    9
                                         // Expected cycles: 8
                                         // Expected IPC:    1.12
                                         //
                                         // Cycle bound:     8.0
                                         // IPC bound:       1.12
                                         //
                                         // Wall time:     0.02s
                                         // User time:     0.02s
                                         //
                                         // ----- cycle (expected) ------>
                                         // 0                        25
                                         // |------------------------|----
        ldrh.w r7, [r2], #6              // *.............................
        ldrb.w r12, [r2, #-4]            // .*............................
        ubfx r8, r7, #12, #4           // ...*..........................
        orr r5, r8, r12, lsl #4          // ....*.........................
        vmov r8, s2                      // ....*.........................
        ubfx r12, r7, #0, #12          // .....*........................
        ldr.w r6, [r8], #4               // .....*........................
        orr r12, r12, r5, lsl #16        // ......*.......................
        smulwt r4, r6, r12               // .......*......................

                                          // ------ cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|-----
        // ldrh.w r12, [r2], #6           // *..............................
        // ldrb.w r6, [r2, #-4]           // .*.............................
        // vmov r8, s2                    // ....*..........................
        // ubfx r4, r12, #12, #4        // ...*...........................
        // orr r4, r4, r6, lsl #4         // ....*..........................
        // ldr.w r6, [r8], #4             // .....*.........................
        // ubfx r12, r12, #0, #12       // .....*.........................
        // orr r12, r12, r4, lsl #16      // ......*........................
        // smulwt r4, r6, r12             // .......*.......................

        sub r14, r14, #16
1:
                                         // Instructions:    45
                                         // Expected cycles: 24
                                         // Expected IPC:    1.88
                                         //
                                         // Cycle bound:     30.0
                                         // IPC bound:       1.50
                                         //
                                         // Wall time:     54.30s
                                         // User time:     54.30s
                                         //
                                         // ----- cycle (expected) ------>
                                         // 0                        25
                                         // |------------------------|----
        ldr r5, [r3, #4]                 // *.............................
        ldr r7, [r1], #8                 // *.............................
        vmov s2, r8                      // .*............................
        smlabt r4, r4, r9, r10           // .*............................
        ldr r8, [r3], #16                // ..*........................... // @slothy:core
        smladx r5, r7, r12, r5           // ..*...........................
        cmp.w r3, r14                    // ...*..........................
        smlatt r4, r7, r4, r8            // ...*..........................
        ldrh.w r8, [r2, #-3]             // ....*.........................
        smlabb r12, r7, r12, r4          // ....*.........................
        ldrb.w r7, [r2, #-1]             // .....*........................
        neg r6, r6                       // ......*.......................
        mul r5, r5, r11                  // ......*.......................
        ubfx r4, r8, #12, #4           // .......*......................
        mul r12, r12, r11                // .......*......................
        orr r4, r4, r7, lsl #4           // ........*.....................
        smlatt r5, r5, r9, r10           // ........*.....................
        ubfx r7, r8, #0, #12           // .........*....................
        smlatt r8, r12, r9, r10          // .........*....................
        ldr r12, [r3, #-4]               // ..........*...................
        orr r7, r7, r4, lsl #16          // ..........*...................
        ldr r4, [r1, #-4]                // ...........*..................
        smulwt r6, r6, r7                // ...........*..................
        pkhtb r8, r5, r8, asr #16        // ............*.................
        str r8, [r0], #8                 // ............*.................
        smlabt r8, r6, r9, r10           // .............*................
        ldr r6, [r3, #-8]                // ..............*...............
        smladx r5, r4, r7, r12           // ..............*...............
        ldrh.w r12, [r2], #6             // ...............e..............
        smlatt r8, r4, r8, r6            // ...............*..............
        ldrb.w r6, [r2, #-4]             // ................e.............
        smlabb r7, r4, r7, r8            // ................*.............
        vmov r8, s2                      // .................e............
        mul r5, r5, r11                  // .................*............
        ubfx r4, r12, #12, #4          // ..................e...........
        mul r7, r7, r11                  // ..................*...........
        orr r4, r4, r6, lsl #4           // ...................e..........
        ldr.w r6, [r8], #4               // ...................e..........
        ubfx r12, r12, #0, #12         // ....................e.........
        smlatt r7, r7, r9, r10           // ....................*.........
        orr r12, r12, r4, lsl #16        // .....................e........
        smlatt r5, r5, r9, r10           // .....................*........
        smulwt r4, r6, r12               // ......................e.......
        pkhtb r5, r5, r7, asr #16        // .......................*......
        str r5, [r0, #-4]                // .......................*......

                                          // ------- cycle (expected) ------->
                                          // 0                        25
                                          // |------------------------|-------
        // ldrb.w r6, [r2, #2]            // .e.......'...............~.......
        // ldrh.w r7, [r2, #3]            // .........'...*...................
        // ldrb.w r8, [r2, #5]            // .........'....*..................
        // ldrh.w r4, [r2], #6            // e........'..............~........
        // ubfx r5, r4, #12, #4         // ...e.....'.................~.....
        // ubfx r4, r4, #0, #12         // .....e...'...................~...
        // orr r5, r5, r6, lsl #4         // ....e....'..................~....
        // orr r4, r4, r5, lsl #16        // ......e..'....................~..
        // ubfx r5, r7, #12, #4         // .........'......*................
        // ubfx r6, r7, #0, #12         // .........'........*..............
        // orr r5, r5, r8, lsl #4         // .........'.......*...............
        // orr r5, r6, r5, lsl #16        // .........'.........*.............
        // vmov r6, s2                    // ..e......'................~......
        // ldr.w r12, [r6], #4            // ....e....'..................~....
        // vmov s2, r6                    // .........'*......................
        // ldr r8, [r1], #8               // .........*.......................
        // ldr r6, [r3], #16              // .........'.*.....................
        // smulwt r7, r12, r4             // .......e.'.....................~.
        // smlabt r7, r7, r9, r10         // .........'*......................
        // smlatt r7, r8, r7, r6          // .........'..*....................
        // smlabb r7, r8, r4, r7          // .........'...*...................
        // mul r7, r7, r11                // .........'......*................
        // smlatt r7, r7, r9, r10         // .........'........*..............
        // ldr r6, [r3, #-12]             // .........*.......................
        // smladx r6, r8, r4, r6          // .........'.*.....................
        // mul r6, r6, r11                // .........'.....*.................
        // smlatt r6, r6, r9, r10         // .........'.......*...............
        // pkhtb r6, r6, r7, asr #16      // .........'...........*...........
        // str r6, [r0], #8               // .........'...........*...........
        // neg r12, r12                   // .........'.....*.................
        // ldr r8, [r1, #-4]              // .........'..........*............
        // ldr r6, [r3, #-8]              // .........'.............*.........
        // smulwt r7, r12, r5             // .........'..........*............
        // smlabt r7, r7, r9, r10         // .........'............*..........
        // smlatt r7, r8, r7, r6          // ~........'..............*........
        // smlabb r7, r8, r5, r7          // .~.......'...............*.......
        // mul r7, r7, r11                // ...~.....'.................*.....
        // smlatt r7, r7, r9, r10         // .....~...'...................*...
        // ldr r6, [r3, #-4]              // .........'.........*.............
        // smladx r6, r8, r5, r6          // .........'.............*.........
        // mul r6, r6, r11                // ..~......'................*......
        // smlatt r6, r6, r9, r10         // ......~..'....................*..
        // pkhtb r6, r6, r7, asr #16      // ........~'......................*
        // str r6, [r0, #-4]              // ........~'......................*
        // cmp.w r3, r14                  // .........'..*....................

        bne 1b
                                          // Instructions:    36
                                          // Expected cycles: 24
                                          // Expected IPC:    1.50
                                          //
                                          // Cycle bound:     24.0
                                          // IPC bound:       1.50
                                          //
                                          // Wall time:     1.17s
                                          // User time:     1.17s
                                          //
                                          // ----- cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|----
        ldr r7, [r1], #8                  // *.............................
        smlabt r5, r4, r9, r10            // *.............................
        vmov s2, r8                       // .*............................
        ldr r8, [r3], #16                 // .*............................ // @slothy:core
        ldr r4, [r3, #-12]                // ..*...........................
        smlatt r8, r7, r5, r8             // ..*...........................
        cmp.w r3, r14                     // ...*..........................
        smlabb r5, r7, r12, r8            // ...*..........................
        ldrh.w r8, [r2, #-3]              // ....*.........................
        smladx r4, r7, r12, r4            // ....*.........................
        neg r6, r6                        // .....*........................
        ldrb.w r7, [r2, #-1]              // .....*........................
        mul r5, r5, r11                   // ......*.......................
        ubfx r12, r8, #12, #4           // .......*......................
        mul r4, r4, r11                   // .......*......................
        orr r12, r12, r7, lsl #4          // ........*.....................
        smlatt r7, r5, r9, r10            // ........*.....................
        ubfx r8, r8, #0, #12            // .........*....................
        smlatt r4, r4, r9, r10            // .........*....................
        orr r8, r8, r12, lsl #16          // ..........*...................
        pkhtb r12, r4, r7, asr #16        // ...........*..................
        smulwt r4, r6, r8                 // ...........*..................
        ldr r7, [r1, #-4]                 // ............*.................
        str r12, [r0], #8                 // ............*.................
        smlabt r12, r4, r9, r10           // .............*................
        ldr r5, [r3, #-8]                 // ..............*...............
        ldr r6, [r3, #-4]                 // ...............*..............
        smlatt r5, r7, r12, r5            // ...............*..............
        smlabb r12, r7, r8, r5            // ................*.............
        smladx r8, r7, r8, r6             // .................*............
        mul r5, r12, r11                  // ..................*...........
        mul r12, r8, r11                  // ...................*..........
        smlatt r4, r5, r9, r10            // ....................*.........
        smlatt r8, r12, r9, r10           // .....................*........
        pkhtb r5, r8, r4, asr #16         // .......................*......
        str r5, [r0, #-4]                 // .......................*......

                                          // ------ cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|-----
        // ldr r5, [r3, #4]               // ..*............................
        // ldr r7, [r1], #8               // *..............................
        // vmov s2, r8                    // .*.............................
        // smlabt r4, r4, r9, r10         // *..............................
        // ldr r8, [r3], #16              // .*.............................
        // smladx r5, r7, r12, r5         // ....*..........................
        // cmp.w r3, r14                  // ...*...........................
        // smlatt r4, r7, r4, r8          // ..*............................
        // ldrh.w r8, [r2, #-3]           // ....*..........................
        // smlabb r12, r7, r12, r4        // ...*...........................
        // ldrb.w r7, [r2, #-1]           // .....*.........................
        // neg r6, r6                     // .....*.........................
        // mul r5, r5, r11                // .......*.......................
        // ubfx r4, r8, #12, #4         // .......*.......................
        // mul r12, r12, r11              // ......*........................
        // orr r4, r4, r7, lsl #4         // ........*......................
        // smlatt r5, r5, r9, r10         // .........*.....................
        // ubfx r7, r8, #0, #12         // .........*.....................
        // smlatt r8, r12, r9, r10        // ........*......................
        // ldr r12, [r3, #-4]             // ...............*...............
        // orr r7, r7, r4, lsl #16        // ..........*....................
        // ldr r4, [r1, #-4]              // ............*..................
        // smulwt r6, r6, r7              // ...........*...................
        // pkhtb r8, r5, r8, asr #16      // ...........*...................
        // str r8, [r0], #8               // ............*..................
        // smlabt r8, r6, r9, r10         // .............*.................
        // ldr r6, [r3, #-8]              // ..............*................
        // smladx r5, r4, r7, r12         // .................*.............
        // smlatt r8, r4, r8, r6          // ...............*...............
        // smlabb r7, r4, r7, r8          // ................*..............
        // mul r5, r5, r11                // ...................*...........
        // mul r7, r7, r11                // ..................*............
        // smlatt r7, r7, r9, r10         // ....................*..........
        // smlatt r5, r5, r9, r10         // .....................*.........
        // pkhtb r5, r5, r7, asr #16      // .......................*.......
        // str r5, [r0, #-4]              // .......................*.......


  // Original code
  // ldr.w tmp, [sp, #9*4]  // load rptr_tmp from stack
  // vmov s1, tmp
  // vmov s2, zetaptr
  // add ctr, tmp, #64*4*4
  // 1:
  // vmov zetaptr, s2
  // ldr.w zeta, [zetaptr], #4
  // deserialize aptr, tmp, tmp2, tmp3, t0, t1
  // vmov s2, zetaptr
  // vmov rptr_tmp, s1
  // doublebasemul_frombytes_asm_acc_32_16 rptr_tmp, rptr, bptr, zeta, tmp3, t0, t1, tmp, tmp2, q, qa, qinv
  // vmov s1, rptr_tmp
  // cmp.w rptr_tmp, ctr
  // bne.w 1b

pop {r4-r11, pc}
