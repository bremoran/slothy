.syntax unified
.cpu cortex-m4
.thumb

// void basemul_asm_acc_opt_32_32(int32_t *, const int16_t *, const int16_t *, const int16_t *)
.global basemul_asm_acc_opt_32_32_opt_m7
.type basemul_asm_acc_opt_32_32_opt_m7, %function
.align 2
basemul_asm_acc_opt_32_32_opt_m7:
  push {r4-r11, lr}

  rptr_tmp  .req r0
  aptr      .req r1
  bptr      .req r2
  aprimeptr .req r3
  poly0     .req r4
  poly1     .req r6
  res0      .req r5
  res1      .req r7
  q         .req r8
  qa        .req r9
  qinv      .req r10
  tmp       .req r11
  tmp2      .req r12
  loop      .req r14

  // movw qa, #26632
 // movt  q, #3329
 ### qinv=0x6ba8f301
 // movw qinv, #62209
 // movt qinv, #27560

  movw loop, #64
  1:
        basemul_asm_opt_32_32_loop_start:
                                       // Instructions:    19
                                       // Expected cycles: 12
                                       // Expected IPC:    1.58
                                       //
                                       // Wall time:     0.09s
                                       // User time:     0.09s
                                       //
                                       // ----- cycle (expected) ------>
                                       // 0                        25
                                       // |------------------------|----
        ldr r5, [r2], #4               // *.............................
        ldr.w r12, [r0]                // *.............................
        ldr r10, [r3], #4              // .*............................
        ldr r8, [r1], #4               // .*............................
        ldr.w r9, [r0, #4]             // ..*...........................
        smlad r11, r10, r5, r12        // ...*..........................
        str r11, [r0], #4              // ...*..........................
        ldr r12, [r3], #4              // ....*.........................
        ldr r11, [r1], #4              // ....*.........................
        smladx r5, r8, r5, r9          // .....*........................
        str r5, [r0], #4               // .....*........................
        ldr r7, [r2], #4               // ......*.......................
        ldr.w r10, [r0, #4]            // .......*......................
        ldr.w r5, [r0]                 // .......*......................
        smlad r5, r12, r7, r5          // .........*....................
        str r5, [r0], #4               // .........*....................
        smladx r5, r11, r7, r10        // ..........*...................
        subs.w r14, #1                 // ...........*..................
        str r5, [r0], #4               // ...........*..................

                                       // ------ cycle (expected) ------>
                                       // 0                        25
                                       // |------------------------|-----
        // ldr r4, [r1], #4            // .*.............................
        // ldr r6, [r2], #4            // *..............................
        // ldr.w r5, [r0]              // *..............................
        // ldr r12, [r3], #4           // .*.............................
        // ldr.w r7, [r0, #4]          // ..*............................
        // smlad r12, r12, r6, r5      // ...*...........................
        // str r12, [r0], #4           // ...*...........................
        // smladx r11, r4, r6, r7      // .....*.........................
        // str r11, [r0], #4           // .....*.........................
        // ldr r4, [r1], #4            // ....*..........................
        // ldr r6, [r2], #4            // ......*........................
        // ldr.w r5, [r0]              // .......*.......................
        // ldr r12, [r3], #4           // ....*..........................
        // ldr.w r7, [r0, #4]          // .......*.......................
        // smlad r12, r12, r6, r5      // .........*.....................
        // str r12, [r0], #4           // .........*.....................
        // smladx r11, r4, r6, r7      // ..........*....................
        // str r11, [r0], #4           // ...........*...................
        // subs.w r14, #1              // ...........*...................

        basemul_asm_opt_32_32_loop_end:

  bne.w 1b

  pop {r4-r11, pc}
