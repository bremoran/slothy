.syntax unified
.cpu cortex-m4
.thumb

// void basemul_asm_acc_opt_32_32(int32_t *, const int16_t *, const int16_t *, const int16_t *)
.global basemul_asm_acc_opt_32_32_opt_m7
.type basemul_asm_acc_opt_32_32_opt_m7, %function
.align 2
basemul_asm_acc_opt_32_32_opt_m7:
  push {r4-r11, lr}

  rptr_tmp  .req r0
  aptr      .req r1
  bptr      .req r2
  aprimeptr .req r3
  poly0     .req r4
  poly1     .req r6
  res0      .req r5
  res1      .req r7
  q         .req r8
  qa        .req r9
  qinv      .req r10
  tmp       .req r11
  tmp2      .req r12
  loop      .req r14

  // movw qa, #26632
 // movt  q, #3329
 ### qinv=0x6ba8f301
 // movw qinv, #62209
 // movt qinv, #27560

  movw loop, #64
                                // Instructions:    2
                                // Expected cycles: 3
                                // Expected IPC:    0.67
                                //
                                // Cycle bound:     3.0
                                // IPC bound:       0.67
                                //
                                // Wall time:     0.04s
                                // User time:     0.04s
                                //
                                // ----- cycle (expected) ------>
                                // 0                        25
                                // |------------------------|----
        ldr r9, [r1], #4        // *.............................
        ldr r4, [r1], #4        // ..*...........................

                                 // ------ cycle (expected) ------>
                                 // 0                        25
                                 // |------------------------|-----
        // ldr r9, [r1], #4      // *..............................
        // ldr r4, [r1], #4      // ..*............................

        sub loop, loop, #1
1:
                                       // Instructions:    18
                                       // Expected cycles: 12
                                       // Expected IPC:    1.50
                                       //
                                       // Cycle bound:     11.0
                                       // IPC bound:       1.64
                                       //
                                       // Wall time:     8.46s
                                       // User time:     8.46s
                                       //
                                       // ----- cycle (expected) ------>
                                       // 0                        25
                                       // |------------------------|----
        ldr r12, [r2], #4              // *.............................
        ldr r5, [r3], #4               // .*............................
        ldr.w r7, [r0]                 // .*............................
        ldr.w r11, [r0, #4]            // ..*...........................
        smlad r6, r5, r12, r7          // ...*..........................
        str r6, [r0], #4               // ...*..........................
        ldr r7, [r3], #4               // ....*.........................
        smladx r9, r9, r12, r11        // ....*.........................
        ldr r6, [r2], #4               // .....*........................
        str r9, [r0], #4               // .....*........................
        ldr r9, [r1], #4               // ......e.......................
        ldr.w r8, [r0]                 // .......*......................
        ldr.w r11, [r0, #4]            // ........*.....................
        smlad r8, r7, r6, r8           // .........*....................
        str r8, [r0], #4               // .........*....................
        smladx r10, r4, r6, r11        // ..........*...................
        ldr r4, [r1], #4               // ...........e..................
        str r10, [r0], #4              // ...........*..................

                                       // ------ cycle (expected) ------>
                                       // 0                        25
                                       // |------------------------|-----
        // ldr r4, [r1], #4            // e.....'.....~.....'.....~......
        // ldr r6, [r2], #4            // ......*...........~............
        // ldr.w r5, [r0]              // ......'*..........'~...........
        // ldr r12, [r3], #4           // ......'*..........'~...........
        // ldr.w r7, [r0, #4]          // ......'.*.........'.~..........
        // smlad r12, r12, r6, r5      // ......'..*........'..~.........
        // str r12, [r0], #4           // ......'..*........'..~.........
        // smladx r11, r4, r6, r7      // ......'...*.......'...~........
        // str r11, [r0], #4           // ......'....*......'....~.......
        // ldr r4, [r1], #4            // .....e'..........~'..........~.
        // ldr r6, [r2], #4            // ......'....*......'....~.......
        // ldr.w r5, [r0]              // .~....'......*....'......~.....
        // ldr r12, [r3], #4           // ......'...*.......'...~........
        // ldr.w r7, [r0, #4]          // ..~...'.......*...'.......~....
        // smlad r12, r12, r6, r5      // ...~..'........*..'........~...
        // str r12, [r0], #4           // ...~..'........*..'........~...
        // smladx r11, r4, r6, r7      // ....~.'.........*.'.........~..
        // str r11, [r0], #4           // .....~'..........*'..........~.

        subs loop, #1
        bne 1b
                                       // Instructions:    16
                                       // Expected cycles: 12
                                       // Expected IPC:    1.33
                                       //
                                       // Cycle bound:     12.0
                                       // IPC bound:       1.33
                                       //
                                       // Wall time:     0.40s
                                       // User time:     0.40s
                                       //
                                       // ----- cycle (expected) ------>
                                       // 0                        25
                                       // |------------------------|----
        ldr.w r7, [r0]                 // *.............................
        ldr r12, [r3], #4              // *.............................
        ldr r10, [r2], #4              // .*............................
        ldr.w r5, [r0, #4]             // ..*...........................
        smlad r12, r12, r10, r7        // ...*..........................
        str r12, [r0], #4              // ...*..........................
        ldr r11, [r2], #4              // ....*.........................
        smladx r12, r9, r10, r5        // ....*.........................
        str r12, [r0], #4              // .....*........................
        ldr.w r12, [r0]                // .......*......................
        ldr r5, [r3], #4               // .......*......................
        ldr.w r7, [r0, #4]             // ........*.....................
        smlad r12, r5, r11, r12        // .........*....................
        str r12, [r0], #4              // .........*....................
        smladx r12, r4, r11, r7        // ..........*...................
        str r12, [r0], #4              // ...........*..................

                                        // ------ cycle (expected) ------>
                                        // 0                        25
                                        // |------------------------|-----
        // ldr r12, [r2], #4            // .*.............................
        // ldr r5, [r3], #4             // *..............................
        // ldr.w r7, [r0]               // *..............................
        // ldr.w r11, [r0, #4]          // ..*............................
        // smlad r6, r5, r12, r7        // ...*...........................
        // str r6, [r0], #4             // ...*...........................
        // ldr r7, [r3], #4             // .......*.......................
        // smladx r9, r9, r12, r11      // ....*..........................
        // ldr r6, [r2], #4             // ....*..........................
        // str r9, [r0], #4             // .....*.........................
        // ldr.w r8, [r0]               // .......*.......................
        // ldr.w r11, [r0, #4]          // ........*......................
        // smlad r8, r7, r6, r8         // .........*.....................
        // str r8, [r0], #4             // .........*.....................
        // smladx r10, r4, r6, r11      // ..........*....................
        // str r10, [r0], #4            // ...........*...................


  pop {r4-r11, pc}
