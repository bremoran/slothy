.syntax unified
.cpu cortex-m4
.thumb

// q locate in the top half of the register
.macro plant_red q, qa, qinv, tmp
 mul \tmp, \tmp, \qinv
 // tmp*qinv mod 2^2n/ 2^n; in high half
 smlatt \tmp, \tmp, \q, \qa
 // result in high half
.endm

// -0.5p~0.5p
.global basemul_asm_acc_opt_m7
.type basemul_asm_acc_opt_m7, %function
.align 2
basemul_asm_acc_opt_m7:
 push {r4-r11, lr}

 rptr    .req r0
 aptr    .req r1
 bptr    .req r2
 zetaptr .req r3
 poly0   .req r4
 poly1   .req r6
 poly2   .req r5
 poly3   .req r7
 q       .req r8
 qa      .req r14
 qinv    .req r9
 tmp     .req r10
 tmp2    .req r11
 zeta    .req r12
 loop    .req r14


 movt  q, #3329
 ### qinv=0x6ba8f301
 movw qinv, #62209
 movt qinv, #27560

 movw loop, #64
                                  // Instructions:    4
                                  // Expected cycles: 3
                                  // Expected IPC:    1.33
                                  //
                                  // Cycle bound:     3.0
                                  // IPC bound:       1.33
                                  //
                                  // Wall time:     0.01s
                                  // User time:     0.01s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        ldr.w r4, [r3], #4        // *.............................
        ldr r12, [r2], #8         // *.............................
        ldr r10, [r1], #8         // .*............................
        smulwt r5, r4, r12        // ..*...........................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // ldr.w r4, [r3], #4      // *..............................
        // ldr r10, [r1], #8       // .*.............................
        // ldr r12, [r2], #8       // *..............................
        // smulwt r5, r4, r12      // ..*............................

        push {r14}
        vmov r14, s21
        sub r14, r14, #1
        vmov s21, r14
        pop {r14}
1:
                                           // Instructions:    36
                                           // Expected cycles: 20
                                           // Expected IPC:    1.80
                                           //
                                           // Cycle bound:     22.0
                                           // IPC bound:       1.64
                                           //
                                           // Wall time:     6.41s
                                           // User time:     6.41s
                                           //
                                           // ----- cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|----
        movw r6, #26632                    // *.............................
        smuadx r7, r10, r12                // *.............................
        ldr r11, [r2, #-4]                 // .*............................
        smlabt r5, r5, r8, r6              // .*............................
        vmov s21, r14                    // ..*...........................
        mul r7, r7, r9                     // ..*...........................
        neg r4, r4                         // ...*..........................
        smultt r14, r10, r5                // ...*..........................
        ldr.w r5, [r0]                     // ....*.........................
        smlabb r12, r10, r12, r14          // ....*.........................
        smulwt r10, r4, r11                // .....*........................
        ldr.w r4, [r3], #4                 // ......e.......................
        mul r14, r12, r9                   // ......*.......................
        smlabt r12, r10, r8, r6            // .......*......................
        ldr r10, [r1, #-4]                 // ........*.....................
        smlatt r14, r14, r8, r6            // ........*.....................
        smlatt r7, r7, r8, r6              // .........*....................
        smultt r12, r10, r12               // ..........*...................
        pkhtb r7, r7, r14, asr #16         // ...........*..................
        smlabb r12, r10, r11, r12          // ...........*..................
        uadd16 r7, r7, r5                  // ............*.................
        smuadx r14, r10, r11               // ............*.................
        ldr r10, [r1], #8                  // .............e................
        mul r11, r12, r9                   // .............*................
        ldr r12, [r2], #8                  // ..............e...............
        mul r5, r14, r9                    // ..............*...............
        vmov r14, s21                    // ...............*..............
        smlatt r11, r11, r8, r6            // ...............*..............
        subs.w r14, #1                     // ................*.............
        smlatt r5, r5, r8, r6              // ................*.............
        ldr.w r6, [r0, #4]                 // .................*............
        str.w r7, [r0], #4                 // .................*............
        pkhtb r11, r5, r11, asr #16        // ..................*...........
        smulwt r5, r4, r12                 // ..................e...........
        uadd16 r7, r11, r6                 // ...................*..........
        str.w r7, [r0], #4                 // ...................*..........

                                             // ------- cycle (expected) -------->
                                             // 0                        25
                                             // |------------------------|--------
        // vmov s0, r14                    // ..............'.*.................
        // movw r14, #26632                  // ..............*...................
        // ldr r5, [r1, #4]                  // ..~...........'.......*...........
        // ldr r4, [r1], #8                  // .......e......'............~......
        // ldr r7, [r2, #4]                  // ..............'*..................
        // ldr r6, [r2], #8                  // ........e.....'.............~.....
        // ldr.w r12, [r3], #4               // e.............'.....~.............
        // smulwt r10, r12, r6               // ............e.'.................~.
        // smlabt r10, r10, r8, r14          // ..............'*..................
        // smultt r10, r4, r10               // ..............'..*................
        // smlabb r10, r4, r6, r10           // ..............'...*...............
        // mul r10, r10, r9                  // ~.............'.....*.............
        // smlatt r10, r10, r8, r14          // ..~...........'.......*...........
        // smuadx r11, r4, r6                // ..............*...................
        // mul r11, r11, r9                  // ..............'.*.................
        // smlatt r11, r11, r8, r14          // ...~..........'........*..........
        // pkhtb r10, r11, r10, asr #16      // .....~........'..........*........
        // ldr.w r11, [r0]                   // ..............'...*...............
        // uadd16 r10, r10, r11              // ......~.......'...........*.......
        // str.w r10, [r0], #4               // ...........~..'................*..
        // neg r12, r12                      // ..............'..*................
        // smulwt r10, r12, r7               // ..............'....*..............
        // smlabt r10, r10, r8, r14          // .~............'......*............
        // smultt r10, r5, r10               // ....~.........'.........*.........
        // smlabb r10, r5, r7, r10           // .....~........'..........*........
        // mul r10, r10, r9                  // .......~......'............*......
        // smlatt r10, r10, r8, r14          // .........~....'..............*....
        // smuadx r11, r5, r7                // ......~.......'...........*.......
        // mul r11, r11, r9                  // ........~.....'.............*.....
        // smlatt r11, r11, r8, r14          // ..........~...'...............*...
        // pkhtb r10, r11, r10, asr #16      // ............~.'.................*.
        // ldr.w r11, [r0]                   // ...........~..'................*..
        // uadd16 r10, r10, r11              // .............~'..................*
        // str.w r10, [r0], #4               // .............~'..................*
        // vmov r14, s0                    // .........~....'..............*....
        // subs.w r14, #1                    // ..........~...'...............*...

        bne 1b
                                            // Instructions:    32
                                            // Expected cycles: 20
                                            // Expected IPC:    1.60
                                            //
                                            // Cycle bound:     20.0
                                            // IPC bound:       1.60
                                            //
                                            // Wall time:     0.66s
                                            // User time:     0.66s
                                            //
                                            // ----- cycle (expected) ------>
                                            // 0                        25
                                            // |------------------------|----
        movw r6, #26632                     // *.............................
        smuadx r11, r10, r12                // *.............................
        vmov s21, r14                     // .*............................
        smlabt r7, r5, r8, r6               // .*............................
        ldr r14, [r1, #-4]                  // ..*...........................
        mul r11, r11, r9                    // ..*...........................
        ldr r5, [r2, #-4]                   // ...*..........................
        smultt r7, r10, r7                  // ...*..........................
        smlabb r12, r10, r12, r7            // ....*.........................
        neg r4, r4                          // .....*........................
        smuadx r10, r14, r5                 // .....*........................
        smulwt r7, r4, r5                   // ......*.......................
        mul r10, r10, r9                    // .......*......................
        smlabt r7, r7, r8, r6               // ........*.....................
        ldr.w r4, [r0]                      // .........*....................
        mul r12, r12, r9                    // .........*....................
        smultt r7, r14, r7                  // ..........*...................
        smlabb r7, r14, r5, r7              // ...........*..................
        smlatt r12, r12, r8, r6             // ............*.................
        mul r7, r7, r9                      // .............*................
        vmov r14, s21                     // ..............*...............
        smlatt r11, r11, r8, r6             // ..............*...............
        ldr.w r5, [r0, #4]                  // ...............*..............
        smlatt r7, r7, r8, r6               // ...............*..............
        pkhtb r11, r11, r12, asr #16        // ................*.............
        smlatt r12, r10, r8, r6             // ................*.............
        uadd16 r10, r11, r4                 // .................*............
        str.w r10, [r0], #4                 // .................*............
        pkhtb r4, r12, r7, asr #16          // ..................*...........
        subs.w r14, #1                      // ..................*...........
        uadd16 r7, r4, r5                   // ...................*..........
        str.w r7, [r0], #4                  // ...................*..........

                                            // ------ cycle (expected) ------>
                                            // 0                        25
                                            // |------------------------|-----
        // movw r6, #26632                  // *..............................
        // smuadx r7, r10, r12              // *..............................
        // ldr r11, [r2, #-4]               // ...*...........................
        // smlabt r5, r5, r8, r6            // .*.............................
        // vmov s21, r14                  // .*.............................
        // mul r7, r7, r9                   // ..*............................
        // neg r4, r4                       // .....*.........................
        // smultt r14, r10, r5              // ...*...........................
        // ldr.w r5, [r0]                   // .........*.....................
        // smlabb r12, r10, r12, r14        // ....*..........................
        // smulwt r10, r4, r11              // ......*........................
        // mul r14, r12, r9                 // .........*.....................
        // smlabt r12, r10, r8, r6          // ........*......................
        // ldr r10, [r1, #-4]               // ..*............................
        // smlatt r14, r14, r8, r6          // ............*..................
        // smlatt r7, r7, r8, r6            // ..............*................
        // smultt r12, r10, r12             // ..........*....................
        // pkhtb r7, r7, r14, asr #16       // ................*..............
        // smlabb r12, r10, r11, r12        // ...........*...................
        // uadd16 r7, r7, r5                // .................*.............
        // smuadx r14, r10, r11             // .....*.........................
        // mul r11, r12, r9                 // .............*.................
        // mul r5, r14, r9                  // .......*.......................
        // vmov r14, s21                  // ..............*................
        // smlatt r11, r11, r8, r6          // ...............*...............
        // subs.w r14, #1                   // ..................*............
        // smlatt r5, r5, r8, r6            // ................*..............
        // ldr.w r6, [r0, #4]               // ...............*...............
        // str.w r7, [r0], #4               // .................*.............
        // pkhtb r11, r5, r11, asr #16      // ..................*............
        // uadd16 r7, r11, r6               // ...................*...........
        // str.w r7, [r0], #4               // ...................*...........

 pop {r4-r11, pc}

.size basemul_asm_acc_opt_m7, .-basemul_asm_acc_opt_m7