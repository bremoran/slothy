.syntax unified
.cpu cortex-m4
.thumb

// q locate in the top half of the register
.macro plant_red q, qa, qinv, tmp
 mul \tmp, \tmp, \qinv
 // tmp*qinv mod 2^2n/ 2^n; in high half
 smlatt \tmp, \tmp, \q, \qa
 // result in high half
.endm

// -0.5p~0.5p
.global basemul_asm_acc_opt_m7
.type basemul_asm_acc_opt_m7, %function
.align 2
basemul_asm_acc_opt_m7:
 push {r4-r11, lr}

 rptr    .req r0
 aptr    .req r1
 bptr    .req r2
 zetaptr .req r3
 poly0   .req r4
 poly1   .req r6
 poly2   .req r5
 poly3   .req r7
 q       .req r8
 qa      .req r14
 qinv    .req r9
 tmp     .req r10
 tmp2    .req r11
 zeta    .req r12
 loop    .req r14


 movt  q, #3329
 ### qinv=0x6ba8f301
 movw qinv, #62209
 movt qinv, #27560

 movw loop, #64
                                  // Instructions:    4
                                  // Expected cycles: 4
                                  // Expected IPC:    1.00
                                  //
                                  // Cycle bound:     4.0
                                  // IPC bound:       1.00
                                  //
                                  // Wall time:     0.01s
                                  // User time:     0.01s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        ldr r5, [r2], #8          // *.............................
        ldr.w r6, [r3], #4        // *.............................
        ldr r4, [r1], #8          // .*............................
        smuadx r11, r4, r5        // ...*..........................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // ldr r5, [r2], #8        // *..............................
        // ldr r4, [r1], #8        // .*.............................
        // ldr.w r6, [r3], #4      // *..............................
        // smuadx r11, r4, r5      // ...*...........................

        sub loop, loop, #1
1:
                                           // Instructions:    35
                                           // Expected cycles: 20
                                           // Expected IPC:    1.75
                                           //
                                           // Cycle bound:     22.0
                                           // IPC bound:       1.59
                                           //
                                           // Wall time:     4.53s
                                           // User time:     4.53s
                                           //
                                           // ----- cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|----
        smulwt r7, r6, r5                  // *.............................
        ldr.w r10, [r0, #4]                // *.............................
        movw r12, #26632                   // .*............................
        mul r11, r11, r9                   // .*............................
        smlabt r7, r7, r8, r12             // ..*...........................
        neg r6, r6                         // ..*...........................
        smlatt r11, r11, r8, r12           // ...*..........................
        vmov.w s14, r14                    // ...*..........................
        smultt r14, r4, r7                 // ....*.........................
        ldr r7, [r2, #-4]                  // ....*.........................
        smlabb r4, r4, r5, r14             // .....*........................
        smulwt r14, r6, r7                 // ......*.......................
        ldr r6, [r1, #-4]                  // ......*.......................
        mul r4, r4, r9                     // .......*......................
        smlabt r14, r14, r8, r12           // ........*.....................
        smlatt r5, r4, r8, r12             // .........*....................
        ldr.w r4, [r0]                     // .........*....................
        smultt r14, r6, r14                // ..........*...................
        smlabb r14, r6, r7, r14            // ...........*..................
        pkhtb r5, r11, r5, asr #16         // ............*.................
        smuadx r6, r6, r7                  // ............*.................
        mul r7, r14, r9                    // .............*................
        vmov.w r14, s14                    // .............*................
        uadd16 r11, r5, r4                 // ..............*...............
        mul r4, r6, r9                     // ..............*...............
        smlatt r7, r7, r8, r12             // ...............*..............
        ldr r5, [r2], #8                   // ...............e..............
        smlatt r12, r4, r8, r12            // ................*.............
        ldr r4, [r1], #8                   // ................e.............
        str.w r11, [r0], #4                // .................*............
        ldr.w r6, [r3], #4                 // .................e............
        pkhtb r12, r12, r7, asr #16        // ..................*...........
        smuadx r11, r4, r5                 // ..................e...........
        uadd16 r12, r12, r10               // ...................*..........
        str.w r12, [r0], #4                // ...................*..........

                                             // ------ cycle (expected) ------>
                                             // 0                        25
                                             // |------------------------|-----
        // vmov.w s0, r14                    // .....'..*................'..~..
        // movw r14, #26632                  // .....'*..................'~....
        // ldr r5, [r1, #4]                  // .....'.....*.............'.....
        // ldr r4, [r1], #8                  // .e...'...............~...'.....
        // ldr r7, [r2, #4]                  // .....'...*...............'...~.
        // ldr r6, [r2], #8                  // e....'..............~....'.....
        // ldr.w r12, [r3], #4               // ..e..'................~..'.....
        // smulwt r10, r12, r6               // .....*...................~.....
        // smlabt r10, r10, r8, r14          // .....'.*.................'.~...
        // smultt r10, r4, r10               // .....'...*...............'...~.
        // smlabb r10, r4, r6, r10           // .....'....*..............'.....
        // mul r10, r10, r9                  // .....'......*............'.....
        // smlatt r10, r10, r8, r14          // .....'........*..........'.....
        // smuadx r11, r4, r6                // ...e.'.................~.'.....
        // mul r11, r11, r9                  // .....'*..................'~....
        // smlatt r11, r11, r8, r14          // .....'..*................'..~..
        // pkhtb r10, r11, r10, asr #16      // .....'...........*.......'.....
        // ldr.w r11, [r0]                   // .....'........*..........'.....
        // uadd16 r10, r10, r11              // .....'.............*.....'.....
        // str.w r10, [r0], #4               // ..~..'................*..'.....
        // neg r12, r12                      // .....'.*.................'.~...
        // smulwt r10, r12, r7               // .....'.....*.............'.....
        // smlabt r10, r10, r8, r14          // .....'.......*...........'.....
        // smultt r10, r5, r10               // .....'.........*.........'.....
        // smlabb r10, r5, r7, r10           // .....'..........*........'.....
        // mul r10, r10, r9                  // .....'............*......'.....
        // smlatt r10, r10, r8, r14          // ~....'..............*....'.....
        // smuadx r11, r5, r7                // .....'...........*.......'.....
        // mul r11, r11, r9                  // .....'.............*.....'.....
        // smlatt r11, r11, r8, r14          // .~...'...............*...'.....
        // pkhtb r10, r11, r10, asr #16      // ...~.'.................*.'.....
        // ldr.w r11, [r0]                   // .....*...................~.....
        // uadd16 r10, r10, r11              // ....~'..................*'.....
        // str.w r10, [r0], #4               // ....~'..................*'.....
        // vmov.w r14, s0                    // .....'............*......'.....

        subs loop, #1
        bne 1b
                                           // Instructions:    31
                                           // Expected cycles: 20
                                           // Expected IPC:    1.55
                                           //
                                           // Cycle bound:     20.0
                                           // IPC bound:       1.55
                                           //
                                           // Wall time:     0.11s
                                           // User time:     0.11s
                                           //
                                           // ----- cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|----
        mul r12, r11, r9                   // *.............................
        vmov.w s9, r14                     // *.............................
        smulwt r14, r6, r5                 // .*............................
        movw r11, #26632                   // .*............................
        smlatt r12, r12, r8, r11           // ..*...........................
        ldr r10, [r2, #-4]                 // ..*...........................
        neg r6, r6                         // ...*..........................
        smlabt r14, r14, r8, r11           // ...*..........................
        smulwt r6, r6, r10                 // ....*.........................
        ldr.w r7, [r0, #4]                 // ....*.........................
        smultt r14, r4, r14                // .....*........................
        smlabb r4, r4, r5, r14             // ......*.......................
        ldr r5, [r1, #-4]                  // ......*.......................
        smlabt r6, r6, r8, r11             // .......*......................
        vmov.w r14, s9                     // .......*......................
        mul r4, r4, r9                     // ........*.....................
        smultt r6, r5, r6                  // .........*....................
        smlatt r4, r4, r8, r11             // ..........*...................
        smlabb r6, r5, r10, r6             // ...........*..................
        smuadx r5, r5, r10                 // ............*.................
        pkhtb r12, r12, r4, asr #16        // .............*................
        mul r6, r6, r9                     // .............*................
        ldr.w r4, [r0]                     // ..............*...............
        mul r5, r5, r9                     // ..............*...............
        smlatt r6, r6, r8, r11             // ...............*..............
        smlatt r5, r5, r8, r11             // ................*.............
        uadd16 r4, r12, r4                 // .................*............
        str.w r4, [r0], #4                 // .................*............
        pkhtb r4, r5, r6, asr #16          // ..................*...........
        uadd16 r4, r4, r7                  // ...................*..........
        str.w r4, [r0], #4                 // ...................*..........

                                            // ------ cycle (expected) ------>
                                            // 0                        25
                                            // |------------------------|-----
        // smulwt r7, r6, r5                // .*.............................
        // ldr.w r10, [r0, #4]              // ....*..........................
        // movw r12, #26632                 // .*.............................
        // mul r11, r11, r9                 // *..............................
        // smlabt r7, r7, r8, r12           // ...*...........................
        // neg r6, r6                       // ...*...........................
        // smlatt r11, r11, r8, r12         // ..*............................
        // vmov.w s14, r14                  // *..............................
        // smultt r14, r4, r7               // .....*.........................
        // ldr r7, [r2, #-4]                // ..*............................
        // smlabb r4, r4, r5, r14           // ......*........................
        // smulwt r14, r6, r7               // ....*..........................
        // ldr r6, [r1, #-4]                // ......*........................
        // mul r4, r4, r9                   // ........*......................
        // smlabt r14, r14, r8, r12         // .......*.......................
        // smlatt r5, r4, r8, r12           // ..........*....................
        // ldr.w r4, [r0]                   // ..............*................
        // smultt r14, r6, r14              // .........*.....................
        // smlabb r14, r6, r7, r14          // ...........*...................
        // pkhtb r5, r11, r5, asr #16       // .............*.................
        // smuadx r6, r6, r7                // ............*..................
        // mul r7, r14, r9                  // .............*.................
        // vmov.w r14, s14                  // .......*.......................
        // uadd16 r11, r5, r4               // .................*.............
        // mul r4, r6, r9                   // ..............*................
        // smlatt r7, r7, r8, r12           // ...............*...............
        // smlatt r12, r4, r8, r12          // ................*..............
        // str.w r11, [r0], #4              // .................*.............
        // pkhtb r12, r12, r7, asr #16      // ..................*............
        // uadd16 r12, r12, r10             // ...................*...........
        // str.w r12, [r0], #4              // ...................*...........

 pop {r4-r11, pc}
