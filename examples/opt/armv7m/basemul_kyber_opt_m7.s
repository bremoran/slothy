.syntax unified
.cpu cortex-m4
.thumb

// q locate in the top half of the register
.macro plant_red q, qa, qinv, tmp
 mul \tmp, \tmp, \qinv
 // tmp*qinv mod 2^2n/ 2^n; in high half
 smlatt \tmp, \tmp, \q, \qa
 // result in high half
.endm

.global basemul_asm_opt_m7
.type basemul_asm_opt_m7, %function
.align 2
basemul_asm_opt_m7:
 push {r4-r11, lr}

 rptr    .req r0
 aptr    .req r1
 bptr    .req r2
 zetaptr .req r3
 poly0   .req r4
 poly1   .req r6
 poly2   .req r5
 poly3   .req r7
 q       .req r8
 qa      .req r14
 qinv    .req r9
 tmp     .req r10
 tmp2    .req r11
 zeta    .req r12
 loop    .req r14

 // movw qa, #26632
 movt  q, #3329
 ### qinv=0x6ba8f301
 movw qinv, #62209
 movt qinv, #27560

 movw loop, #64
                                  // Instructions:    3
                                  // Expected cycles: 2
                                  // Expected IPC:    1.50
                                  //
                                  // Cycle bound:     2.0
                                  // IPC bound:       1.50
                                  //
                                  // Wall time:     0.01s
                                  // User time:     0.01s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        ldr r6, [r1], #8          // *.............................
        ldr.w r5, [r3], #4        // *.............................
        ldr r7, [r2], #8          // .*............................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // ldr r6, [r1], #8        // *..............................
        // ldr.w r5, [r3], #4      // *..............................
        // ldr r7, [r2], #8        // .*.............................

        sub loop, loop, #1
1:
                                           // Instructions:    31
                                           // Expected cycles: 20
                                           // Expected IPC:    1.55
                                           //
                                           // Cycle bound:     19.0
                                           // IPC bound:       1.63
                                           //
                                           // Wall time:     2.77s
                                           // User time:     2.77s
                                           //
                                           // ----- cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|----
        vmov s27, r14                      // *.............................
        smuadx r4, r6, r7                  // *.............................
        movw r12, #26632                   // .*............................
        smulwt r10, r5, r7                 // .*............................
        ldr r11, [r1, #-4]                 // ..*...........................
        mul r4, r4, r9                     // ..*...........................
        ldr r14, [r2, #-4]                 // ...*..........................
        smlabt r10, r10, r8, r12           // ...*..........................
        neg r5, r5                         // ....*.........................
        smlatt r4, r4, r8, r12             // ....*.........................
        smulwt r5, r5, r14                 // .....*........................
        smultt r10, r6, r10                // ......*.......................
        smlabb r7, r6, r7, r10             // .......*......................
        smlabt r6, r5, r8, r12             // ........*.....................
        mul r10, r7, r9                    // .........*....................
        smultt r5, r11, r6                 // ..........*...................
        smlabb r5, r11, r14, r5            // ...........*..................
        smlatt r10, r10, r8, r12           // ............*.................
        smuadx r6, r11, r14                // .............*................
        vmov r14, s27                      // ..............*...............
        mul r11, r5, r9                    // ..............*...............
        pkhtb r10, r4, r10, asr #16        // ...............*..............
        mul r7, r6, r9                     // ...............*..............
        ldr r6, [r1], #8                   // ................e.............
        smlatt r11, r11, r8, r12           // ................*.............
        ldr.w r5, [r3], #4                 // .................e............
        smlatt r4, r7, r8, r12             // .................*............
        ldr r7, [r2], #8                   // ..................e...........
        str r10, [r0], #4                  // ..................*...........
        pkhtb r10, r4, r11, asr #16        // ...................*..........
        str r10, [r0], #4                  // ...................*..........

                                             // ------ cycle (expected) ------>
                                             // 0                        25
                                             // |------------------------|-----
        // vmov s0, r14                      // ....*...................~......
        // movw r14, #26632                  // ....'*..................'~.....
        // ldr r5, [r1, #4]                  // ....'.*.................'.~....
        // ldr r4, [r1], #8                  // e...'...............~...'......
        // ldr r7, [r2, #4]                  // ....'..*................'..~...
        // ldr r6, [r2], #8                  // ..e.'.................~.'......
        // ldr.w r12, [r3], #4               // .e..'................~..'......
        // smulwt r10, r12, r6               // ....'*..................'~.....
        // smlabt r10, r10, r8, r14          // ....'..*................'..~...
        // smultt r10, r4, r10               // ....'.....*.............'......
        // smlabb r10, r4, r6, r10           // ....'......*............'......
        // mul r10, r10, r9                  // ....'........*..........'......
        // smlatt r10, r10, r8, r14          // ....'...........*.......'......
        // smuadx r11, r4, r6                // ....*...................~......
        // mul r11, r11, r9                  // ....'.*.................'.~....
        // smlatt r11, r11, r8, r14          // ....'...*...............'...~..
        // pkhtb r10, r11, r10, asr #16      // ....'..............*....'......
        // str r10, [r0], #4                 // ..~.'.................*.'......
        // neg r12, r12                      // ....'...*...............'...~..
        // smulwt r10, r12, r7               // ....'....*..............'....~.
        // smlabt r10, r10, r8, r14          // ....'.......*...........'......
        // smultt r10, r5, r10               // ....'.........*.........'......
        // smlabb r10, r5, r7, r10           // ....'..........*........'......
        // mul r10, r10, r9                  // ....'.............*.....'......
        // smlatt r10, r10, r8, r14          // ~...'...............*...'......
        // smuadx r11, r5, r7                // ....'............*......'......
        // mul r11, r11, r9                  // ....'..............*....'......
        // smlatt r11, r11, r8, r14          // .~..'................*..'......
        // pkhtb r10, r11, r10, asr #16      // ...~'..................*'......
        // str r10, [r0], #4                 // ...~'..................*'......
        // vmov r14, s0                      // ....'.............*.....'......

        subs loop, #1
        bne 1b
                                           // Instructions:    28
                                           // Expected cycles: 20
                                           // Expected IPC:    1.40
                                           //
                                           // Cycle bound:     20.0
                                           // IPC bound:       1.40
                                           //
                                           // Wall time:     0.08s
                                           // User time:     0.08s
                                           //
                                           // ----- cycle (expected) ------>
                                           // 0                        25
                                           // |------------------------|----
        vmov s31, r14                      // *.............................
        smulwt r14, r5, r7                 // *.............................
        neg r5, r5                         // .*............................
        smuadx r12, r6, r7                 // .*............................
        movw r11, #26632                   // ..*...........................
        smlabt r4, r14, r8, r11            // ..*...........................
        vmov r14, s31                      // ...*..........................
        mul r12, r12, r9                   // ...*..........................
        ldr r10, [r2, #-4]                 // ....*.........................
        smultt r4, r6, r4                  // ....*.........................
        smlabb r7, r6, r7, r4              // .....*........................
        ldr r4, [r1, #-4]                  // ......*.......................
        smulwt r5, r5, r10                 // ......*.......................
        smlatt r12, r12, r8, r11           // .......*......................
        smlabt r5, r5, r8, r11             // ........*.....................
        smuadx r6, r4, r10                 // .........*....................
        smultt r5, r4, r5                  // ..........*...................
        smlabb r5, r4, r10, r5             // ...........*..................
        mul r7, r7, r9                     // ............*.................
        mul r5, r5, r9                     // .............*................
        smlatt r7, r7, r8, r11             // ..............*...............
        mul r4, r6, r9                     // ...............*..............
        smlatt r5, r5, r8, r11             // ................*.............
        pkhtb r12, r12, r7, asr #16        // .................*............
        smlatt r7, r4, r8, r11             // .................*............
        str r12, [r0], #4                  // ..................*...........
        pkhtb r12, r7, r5, asr #16         // ...................*..........
        str r12, [r0], #4                  // ...................*..........

                                            // ------ cycle (expected) ------>
                                            // 0                        25
                                            // |------------------------|-----
        // vmov s27, r14                    // *..............................
        // smuadx r4, r6, r7                // .*.............................
        // movw r12, #26632                 // ..*............................
        // smulwt r10, r5, r7               // *..............................
        // ldr r11, [r1, #-4]               // ......*........................
        // mul r4, r4, r9                   // ...*...........................
        // ldr r14, [r2, #-4]               // ....*..........................
        // smlabt r10, r10, r8, r12         // ..*............................
        // neg r5, r5                       // .*.............................
        // smlatt r4, r4, r8, r12           // .......*.......................
        // smulwt r5, r5, r14               // ......*........................
        // smultt r10, r6, r10              // ....*..........................
        // smlabb r7, r6, r7, r10           // .....*.........................
        // smlabt r6, r5, r8, r12           // ........*......................
        // mul r10, r7, r9                  // ............*..................
        // smultt r5, r11, r6               // ..........*....................
        // smlabb r5, r11, r14, r5          // ...........*...................
        // smlatt r10, r10, r8, r12         // ..............*................
        // smuadx r6, r11, r14              // .........*.....................
        // vmov r14, s27                    // ...*...........................
        // mul r11, r5, r9                  // .............*.................
        // pkhtb r10, r4, r10, asr #16      // .................*.............
        // mul r7, r6, r9                   // ...............*...............
        // smlatt r11, r11, r8, r12         // ................*..............
        // smlatt r4, r7, r8, r12           // .................*.............
        // str r10, [r0], #4                // ..................*............
        // pkhtb r10, r4, r11, asr #16      // ...................*...........
        // str r10, [r0], #4                // ...................*...........

    pop {r4-r11, pc}

.size basemul_asm_opt_m7, .-basemul_asm_opt_m7