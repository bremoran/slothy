.syntax unified
.cpu cortex-m4
.thumb

.macro doublebasemul_frombytes_asm_acc_32_32 rptr_tmp, bptr, zeta, poly0, poly1, poly3, res0, tmp, q, qa, qinv
  ldr \poly0, [\bptr], #8
  ldr \res0, [\rptr_tmp]

  smulwt \tmp, \zeta, \poly1
 smlabt \tmp, \tmp, \q, \qa
 smlatt \tmp, \poly0, \tmp, \res0
 smlabb \tmp, \poly0, \poly1, \tmp

  str \tmp, [\rptr_tmp], #16 // @slothy:core

  ldr \res0, [\rptr_tmp, #-12]
  smladx \tmp, \poly0, \poly1, \res0
  str \tmp, [\rptr_tmp, #-12]

  neg \zeta, \zeta

  ldr \poly0, [\bptr, #-4]
  ldr \res0, [\rptr_tmp, #-8]

  smulwt \tmp, \zeta, \poly3
 smlabt \tmp, \tmp, \q, \qa
 smlatt \tmp, \poly0, \tmp, \res0
 smlabb \tmp, \poly0, \poly3, \tmp

  str \tmp, [\rptr_tmp, #-8]

  ldr \res0, [\rptr_tmp, #-4]
  smladx \tmp, \poly0, \poly3, \res0
  str \tmp, [\rptr_tmp, #-4]
.endm

// reduce 2 registers
.macro deserialize aptr, tmp, tmp2, tmp3, t0, t1
 ldrb.w \tmp, [\aptr, #2]
 ldrh.w \tmp2, [\aptr, #3]
 ldrb.w \tmp3, [\aptr, #5]
 ldrh.w \t0, [\aptr], #6

 ubfx.w \t1, \t0, #12, #4
 ubfx.w \t0, \t0, #0, #12
 orr \t1, \t1, \tmp, lsl #4
 orr \t0, \t0, \t1, lsl #16
 // tmp is free now
 ubfx.w \t1, \tmp2, #12, #4
 ubfx.w \tmp, \tmp2, #0, #12
 orr \t1, \t1, \tmp3, lsl #4
 orr \t1, \tmp, \t1, lsl #16
.endm

// void frombytes_mul_asm_acc_32_32(int32_t *r_tmp, const int16_t *b, const unsigned char *c, const int32_t zetas[64])
.global frombytes_mul_asm_acc_32_32_opt_m7
.type frombytes_mul_asm_acc_32_32_opt_m7, %function
.align 2
frombytes_mul_asm_acc_32_32_opt_m7:
  push {r4-r11, r14}

  rptr_tmp .req r0
  bptr     .req r1
  aptr     .req r2
  zetaptr  .req r3
  t0       .req r4
 t1       .req r5
 tmp      .req r6
 tmp2     .req r7
 tmp3     .req r8
 q        .req r9
 qa       .req r10
 qinv     .req r11
 zeta     .req r12
 ctr      .req r14

  movw qa, #26632
 movt  q, #3329
 ### qinv=0x6ba8f301
 movw qinv, #62209
 movt qinv, #27560

  add ctr, rptr_tmp, #64*4*4
                                      // Instructions:    9
                                      // Expected cycles: 6
                                      // Expected IPC:    1.50
                                      //
                                      // Cycle bound:     6.0
                                      // IPC bound:       1.50
                                      //
                                      // Wall time:     0.02s
                                      // User time:     0.02s
                                      //
                                      // ----- cycle (expected) ------>
                                      // 0                        25
                                      // |------------------------|----
        ldrh.w r6, [r2], #6           // *.............................
        ldrb.w r4, [r2, #-4]          // *.............................
        ldrb.w r7, [r2, #-1]          // .*............................
        ldr r12, [r0, #4]             // .*............................
        ldr r11, [r1], #8             // ..*...........................
        ubfx.w r5, r6, #12, #4        // ...*..........................
        ubfx.w r8, r6, #0, #12        // ....*.........................
        ldrh.w r6, [r2, #-3]          // ....*.........................
        orr r5, r5, r4, lsl #4        // .....*........................

                                        // ------ cycle (expected) ------>
                                        // 0                        25
                                        // |------------------------|-----
        // ldrh.w r8, [r2], #6          // *..............................
        // ldrb.w r5, [r2, #-4]         // *..............................
        // ldrb.w r7, [r2, #-1]         // .*.............................
        // ubfx.w r12, r8, #12, #4      // ...*...........................
        // ldrh.w r6, [r2, #-3]         // ....*..........................
        // ubfx.w r8, r8, #0, #12       // ....*..........................
        // ldr r11, [r1], #8            // ..*............................
        // orr r5, r12, r5, lsl #4      // .....*.........................
        // ldr r12, [r0, #4]            // .*.............................

        sub ctr, ctr, #16
1:
                                        // Instructions:    34
                                        // Expected cycles: 18
                                        // Expected IPC:    1.89
                                        //
                                        // Cycle bound:     26.0
                                        // IPC bound:       1.31
                                        //
                                        // Wall time:     17.47s
                                        // User time:     17.47s
                                        //
                                        // ----- cycle (expected) ------>
                                        // 0                        25
                                        // |------------------------|----
        orr r8, r8, r5, lsl #16         // *.............................
        ldr.w r5, [r3], #4              // *.............................
        ubfx.w r4, r6, #12, #4          // .*............................
        smladx r12, r11, r8, r12        // .*............................
        orr r7, r4, r7, lsl #4          // ..*...........................
        smulwt r4, r5, r8               // ..*...........................
        ubfx.w r6, r6, #0, #12          // ...*..........................
        str r12, [r0, #4]               // ...*..........................
        neg r5, r5                      // ....*.........................
        orr r6, r6, r7, lsl #16         // ....*.........................
        smulwt r7, r5, r6               // .....*........................
        ldr r5, [r0]                    // .....*........................
        smlabt r4, r4, r9, r10          // ......*.......................
        smlabt r12, r7, r9, r10         // .......*......................
        ldr r7, [r1, #-4]               // .......*......................
        smlatt r5, r11, r4, r5          // ........*.....................
        ldr r4, [r0, #8]                // ........*.....................
        smlatt r4, r7, r12, r4          // .........*....................
        ldr r12, [r0, #12]              // .........*....................
        smlabb r11, r11, r8, r5         // ..........*...................
        ldrh.w r8, [r2], #6             // ..........e...................
        ldrb.w r5, [r2, #-4]            // ...........e..................
        smlabb r4, r7, r6, r4           // ...........*..................
        smladx r12, r7, r6, r12         // ............*.................
        ldrb.w r7, [r2, #-1]            // ............e.................
        str r12, [r0, #12]              // .............*................
        ubfx.w r12, r8, #12, #4         // ..............e...............
        ldrh.w r6, [r2, #-3]            // ..............e...............
        ubfx.w r8, r8, #0, #12          // ...............e..............
        str r11, [r0], #16              // ...............*.............. // @slothy:core
        ldr r11, [r1], #8               // ................e.............
        orr r5, r12, r5, lsl #4         // ................e.............
        str r4, [r0, #-8]               // .................*............
        ldr r12, [r0, #4]               // .................e............

                                        // ------ cycle (expected) ------>
                                        // 0                        25
                                        // |------------------------|-----
        // ldr.w r12, [r3], #4          // ........*.................~....
        // ldrb.w r6, [r2, #2]          // .e......'..........~......'....
        // ldrh.w r7, [r2, #3]          // ....e...'.............~...'....
        // ldrb.w r8, [r2, #5]          // ..e.....'...........~.....'....
        // ldrh.w r4, [r2], #6          // e.......'.........~.......'....
        // ubfx.w r5, r4, #12, #4       // ....e...'.............~...'....
        // ubfx.w r4, r4, #0, #12       // .....e..'..............~..'....
        // orr r5, r5, r6, lsl #4       // ......e.'...............~.'....
        // orr r4, r4, r5, lsl #16      // ........*.................~....
        // ubfx.w r5, r7, #12, #4       // ........'*................'~...
        // ubfx.w r6, r7, #0, #12       // ........'..*..............'..~.
        // orr r5, r5, r8, lsl #4       // ........'.*...............'.~..
        // orr r5, r6, r5, lsl #16      // ........'...*.............'....
        // ldr r8, [r1], #8             // ......e.'...............~.'....
        // ldr r6, [r0]                 // ........'....*............'....
        // smulwt r7, r12, r4           // ........'.*...............'.~..
        // smlabt r7, r7, r9, r10       // ........'.....*...........'....
        // smlatt r7, r8, r7, r6        // ........'.......*.........'....
        // smlabb r7, r8, r4, r7        // ~.......'.........*.......'....
        // str r7, [r0], #16            // .....~..'..............*..'....
        // ldr r6, [r0, #-12]           // .......e'................~'....
        // smladx r7, r8, r4, r6        // ........'*................'~...
        // str r7, [r0, #-12]           // ........'..*..............'..~.
        // neg r12, r12                 // ........'...*.............'....
        // ldr r8, [r1, #-4]            // ........'......*..........'....
        // ldr r6, [r0, #-8]            // ........'.......*.........'....
        // smulwt r7, r12, r5           // ........'....*............'....
        // smlabt r7, r7, r9, r10       // ........'......*..........'....
        // smlatt r7, r8, r7, r6        // ........'........*........'....
        // smlabb r7, r8, r5, r7        // .~......'..........*......'....
        // str r7, [r0, #-8]            // .......~'................*'....
        // ldr r6, [r0, #-4]            // ........'........*........'....
        // smladx r7, r8, r5, r6        // ..~.....'...........*.....'....
        // str r7, [r0, #-4]            // ...~....'............*....'....

        cmp rptr_tmp, ctr
        bne 1b
                                        // Instructions:    25
                                        // Expected cycles: 18
                                        // Expected IPC:    1.39
                                        //
                                        // Cycle bound:     18.0
                                        // IPC bound:       1.39
                                        //
                                        // Wall time:     0.13s
                                        // User time:     0.13s
                                        //
                                        // ----- cycle (expected) ------>
                                        // 0                        25
                                        // |------------------------|----
        orr r8, r8, r5, lsl #16         // *.............................
        ldr.w r5, [r3], #4              // *.............................
        ubfx.w r4, r6, #12, #4          // .*............................
        smladx r12, r11, r8, r12        // .*............................
        orr r7, r4, r7, lsl #4          // ..*...........................
        smulwt r4, r5, r8               // ..*...........................
        ubfx.w r6, r6, #0, #12          // ...*..........................
        str r12, [r0, #4]               // ...*..........................
        orr r7, r6, r7, lsl #16         // ....*.........................
        neg r5, r5                      // ....*.........................
        smulwt r12, r5, r7              // .....*........................
        ldr r6, [r1, #-4]               // .....*........................
        smlabt r5, r4, r9, r10          // ......*.......................
        smlabt r4, r12, r9, r10         // .......*......................
        ldr r12, [r0]                   // .......*......................
        smlatt r5, r11, r5, r12         // ........*.....................
        ldr r12, [r0, #8]               // ........*.....................
        smlabb r11, r11, r8, r5         // .........*....................
        smlatt r4, r6, r4, r12          // ..........*...................
        ldr r12, [r0, #12]              // ..........*...................
        smlabb r4, r6, r7, r4           // ...........*..................
        smladx r12, r6, r7, r12         // ............*.................
        str r12, [r0, #12]              // .............*................
        str r11, [r0], #16              // ...............*.............. // @slothy:core
        str r4, [r0, #-8]               // .................*............

                                         // ------ cycle (expected) ------>
                                         // 0                        25
                                         // |------------------------|-----
        // orr r8, r8, r5, lsl #16       // *..............................
        // ldr.w r5, [r3], #4            // *..............................
        // ubfx.w r4, r6, #12, #4        // .*.............................
        // smladx r12, r11, r8, r12      // .*.............................
        // orr r7, r4, r7, lsl #4        // ..*............................
        // smulwt r4, r5, r8             // ..*............................
        // ubfx.w r6, r6, #0, #12        // ...*...........................
        // str r12, [r0, #4]             // ...*...........................
        // neg r5, r5                    // ....*..........................
        // orr r6, r6, r7, lsl #16       // ....*..........................
        // smulwt r7, r5, r6             // .....*.........................
        // ldr r5, [r0]                  // .......*.......................
        // smlabt r4, r4, r9, r10        // ......*........................
        // smlabt r12, r7, r9, r10       // .......*.......................
        // ldr r7, [r1, #-4]             // .....*.........................
        // smlatt r5, r11, r4, r5        // ........*......................
        // ldr r4, [r0, #8]              // ........*......................
        // smlatt r4, r7, r12, r4        // ..........*....................
        // ldr r12, [r0, #12]            // ..........*....................
        // smlabb r11, r11, r8, r5       // .........*.....................
        // smlabb r4, r7, r6, r4         // ...........*...................
        // smladx r12, r7, r6, r12       // ............*..................
        // str r12, [r0, #12]            // .............*.................
        // str r11, [r0], #16            // ...............*...............
        // str r4, [r0, #-8]             // .................*.............


pop {r4-r11, pc}
