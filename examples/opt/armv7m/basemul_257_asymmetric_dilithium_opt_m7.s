// 2
.macro barrett_32 a, Qbar, Q, tmp
    smmulr \tmp, \a, \Qbar
    mls \a, \tmp, \Q, \a
.endm

.syntax unified
.cpu cortex-m4

.align 2
.global __asm_asymmetric_mul_257_16_opt_m7
.type __asm_asymmetric_mul_257_16_opt_m7, %function
__asm_asymmetric_mul_257_16_opt_m7:
    push.w {r4-r11, lr}

    .equ width, 4

    add.w r12, r0, #256*width
                                    // Instructions:    6
                                    // Expected cycles: 4
                                    // Expected IPC:    1.50
                                    //
                                    // Wall time:     0.01s
                                    // User time:     0.01s
                                    //
                                    // ----- cycle (expected) ------>
                                    // 0                        25
                                    // |------------------------|----
        ldr.w r9, [r1, #4]          // *.............................
        ldr.w r5, [r1], #2*4        // *.............................
        ldr.w r7, [r2, #4]          // .*............................
        ldr.w r4, [r3, #4]          // ..*...........................
        ldr.w r6, [r3], #2*4        // ...*..........................
        smuadx r11, r9, r7          // ...*..........................

                                     // ------ cycle (expected) ------>
                                     // 0                        25
                                     // |------------------------|-----
        // ldr.w r9, [r1, #4]        // *..............................
        // ldr.w r7, [r2, #4]        // .*.............................
        // ldr.w r4, [r3, #4]        // ..*............................
        // ldr.w r6, [r3], #2*4      // ...*...........................
        // ldr.w r5, [r1], #2*4      // *..............................
        // smuadx r11, r9, r7        // ...*...........................

        sub r12, r12, #16
1:
                                     // Instructions:    15
                                     // Expected cycles: 8
                                     // Expected IPC:    1.88
                                     //
                                     // Wall time:     0.16s
                                     // User time:     0.16s
                                     //
                                     // ----- cycle (expected) ------>
                                     // 0                        25
                                     // |------------------------|----
        smuad r8, r9, r4             // *.............................
        ldr.w r4, [r2], #2*4         // *.............................
        smuad r10, r5, r6            // .*............................
        ldr.w r9, [r1, #4]           // .e............................
        smuadx r6, r5, r4            // ..*...........................
        ldr.w r7, [r2, #4]           // ..e...........................
        ldr.w r4, [r3, #4]           // ...e..........................
        str.w r6, [r0, #4]           // ...*..........................
        ldr.w r6, [r3], #2*4         // ....e.........................
        str.w r10, [r0], #2*4        // ....*......................... // @slothy:core
        ldr.w r5, [r1], #2*4         // .....e........................
        str.w r11, [r0, #4]          // .....*........................
        str.w r8, [r0], #2*4         // ......*....................... // @slothy:core
        cmp.w r0, r12                // .......*......................
        smuadx r11, r9, r7           // .......e......................

                                       // ------ cycle (expected) ------>
                                       // 0                        25
                                       // |------------------------|-----
        // ldr.w r7, [r1, #4]          // e......'~......'~......'~......
        // ldr.w r4, [r1], #2*4        // ....e..'....~..'....~..'....~..
        // ldr.w r8, [r2, #4]          // .e.....'.~.....'.~.....'.~.....
        // ldr.w r5, [r2], #2*4        // .......*.......~.......~.......
        // ldr.w r9, [r3, #4]          // ..e....'..~....'..~....'..~....
        // ldr.w r6, [r3], #2*4        // ...e...'...~...'...~...'...~...
        // smuad r10, r4, r6           // ~......'*......'~......'~......
        // smuadx r11, r4, r5          // .~.....'.*.....'.~.....'.~.....
        // str.w r11, [r0, #4]         // ..~....'..*....'..~....'..~....
        // str.w r10, [r0], #2*4       // ...~...'...*...'...~...'...~...
        // smuad r10, r7, r9           // .......*.......~.......~.......
        // smuadx r11, r7, r8          // ......e'......~'......~'.......
        // str.w r11, [r0, #4]         // ....~..'....*..'....~..'....~..
        // str.w r10, [r0], #2*4       // .....~.'.....*.'.....~.'.....~.
        // cmp.w r0, r12               // ......~'......*'......~'.......

        bne 1b
                                    // Instructions:    9
                                    // Expected cycles: 8
                                    // Expected IPC:    1.12
                                    //
                                    // Wall time:     0.02s
                                    // User time:     0.02s
                                    //
                                    // ----- cycle (expected) ------>
                                    // 0                        25
                                    // |------------------------|----
        smuad r4, r9, r4            // *.............................
        ldr.w r7, [r2], #2*4        // *.............................
        smuad r6, r5, r6            // .*............................
        smuadx r5, r5, r7           // ..*...........................
        str.w r5, [r0, #4]          // ...*..........................
        str.w r6, [r0], #2*4        // ....*......................... // @slothy:core
        str.w r11, [r0, #4]         // .....*........................
        str.w r4, [r0], #2*4        // ......*....................... // @slothy:core
        cmp.w r0, r12               // .......*......................

                                      // ------ cycle (expected) ------>
                                      // 0                        25
                                      // |------------------------|-----
        // smuad r8, r9, r4           // *..............................
        // ldr.w r4, [r2], #2*4       // *..............................
        // smuad r10, r5, r6          // .*.............................
        // smuadx r6, r5, r4          // ..*............................
        // str.w r6, [r0, #4]         // ...*...........................
        // str.w r10, [r0], #2*4      // ....*..........................
        // str.w r11, [r0, #4]        // .....*.........................
        // str.w r8, [r0], #2*4       // ......*........................
        // cmp.w r0, r12              // .......*.......................


    pop.w {r4-r11, pc}