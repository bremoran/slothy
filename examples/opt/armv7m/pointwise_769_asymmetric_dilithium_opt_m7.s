/**
 * Copyright (c) 2023 Junhao Huang (jhhuang_nuaa@126.com)
 *
 * Licensed under the Apache License, Version 2.0(the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http:// www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
.syntax unified
.cpu cortex-m4
.thumb

// q locate in the top half of the register
.macro plant_red q, qa, qinv, tmp
  mul \tmp, \tmp, \qinv
  // tmp*qinv mod 2^2n/ 2^n; in high half
  smlatt \tmp, \tmp, \q, \qa
  // result in high half
.endm

#### r0: out; r1: a; r2: b; r3: bprime
  .align 2
.global small_asymmetric_mul_asm_769_opt_m7
.type small_asymmetric_mul_asm_769_opt_m7, %function
small_asymmetric_mul_asm_769_opt_m7:
    push.w {r4-r11, lr}

    movw r14, #24608 // qa
    movt r12, #769  // q
 movw r11, #64769
 movt r11, #58632 // qinv
    .equ width, 4
    add.w r10, r0, #256*2
                                        // Instructions:    13
                                        // Expected cycles: 9
                                        // Expected IPC:    1.44
                                        //
                                        // Wall time:     0.05s
                                        // User time:     0.05s
                                        //
                                        // ----- cycle (expected) ------>
                                        // 0                        25
                                        // |------------------------|----
        ldr.w r4, [r1, #width]          // *.............................
        ldr.w r9, [r2, #width]          // *.............................
        ldr.w r5, [r3, #width]          // .*............................
        ldr.w r7, [r3], #2*width        // .*............................
        ldr.w r8, [r2], #2*width        // ..*...........................
        smuadx r9, r4, r9               // ..*...........................
        ldr.w r6, [r1], #2*width        // ...*..........................
        smuad r5, r4, r5                // ...*..........................
        mul r9, r9, r11                 // ....*.........................
        mul r5, r5, r11                 // .....*........................
        smlatt r9, r9, r12, r14         // ......*.......................
        smlatt r4, r5, r12, r14         // .......*......................
        smuadx r8, r6, r8               // ........*.....................

                                         // ------ cycle (expected) ------>
                                         // 0                        25
                                         // |------------------------|-----
        // ldr.w r5, [r1, #width]        // *..............................
        // ldr.w r9, [r3, #width]        // .*.............................
        // ldr.w r4, [r2, #width]        // *..............................
        // smuadx r4, r5, r4             // ..*............................
        // smuad r9, r5, r9              // ...*...........................
        // mul r5, r4, r11               // ....*..........................
        // ldr.w r6, [r1], #2*width      // ...*...........................
        // mul r4, r9, r11               // .....*.........................
        // smlatt r9, r5, r12, r14       // ......*........................
        // ldr.w r5, [r2], #2*width      // ..*............................
        // ldr.w r7, [r3], #2*width      // .*.............................
        // smlatt r4, r4, r12, r14       // .......*.......................
        // smuadx r8, r6, r5             // ........*......................

        sub r10, r10, #width*2
_asymmetric_mul_16_loop:
                                         // Instructions:    22
                                         // Expected cycles: 12
                                         // Expected IPC:    1.83
                                         //
                                         // Wall time:     39.11s
                                         // User time:     39.11s
                                         //
                                         // ----- cycle (expected) ------>
                                         // 0                        25
                                         // |------------------------|----
        ldr.w r5, [r1, #width]           // e.............................
        smuad r6, r6, r7                 // *.............................
        mul r7, r8, r11                  // .*............................
        pkhtb r8, r9, r4, asr #16        // .*............................
        ldr.w r9, [r3, #width]           // ..e...........................
        mul r6, r6, r11                  // ..*...........................
        ldr.w r4, [r2, #width]           // ...e..........................
        smlatt r7, r7, r12, r14          // ...*..........................
        smlatt r6, r6, r12, r14          // ....*.........................
        smuadx r4, r5, r4                // .....e........................
        smuad r9, r5, r9                 // ......e.......................
        pkhtb r5, r7, r6, asr #16        // ......*.......................
        str.w r5, [r0], #width           // .......*......................
        mul r5, r4, r11                  // .......e......................
        ldr.w r6, [r1], #2*width         // ........e.....................
        mul r4, r9, r11                  // ........e.....................
        smlatt r9, r5, r12, r14          // .........e....................
        ldr.w r5, [r2], #2*width         // .........e....................
        ldr.w r7, [r3], #2*width         // ..........e...................
        smlatt r4, r4, r12, r14          // ..........e...................
        str.w r8, [r0], #width           // ...........*..................
        smuadx r8, r6, r5                // ...........e..................

                                          // ------ cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|-----
        // ldr.w r7, [r1, #width]         // e...........~...........~......
        // ldr.w r4, [r1], #2*width       // ........e...'.......~...'......
        // ldr.w r8, [r2, #width]         // ...e........'..~........'..~...
        // ldr.w r5, [r2], #2*width       // .........e..'........~..'......
        // ldr.w r9, [r3, #width]         // ..e.........'.~.........'.~....
        // ldr.w r6, [r3], #2*width       // ..........e.'.........~.'......
        // smuad r6, r4, r6               // ~...........*...........~......
        // mul r6, r6, r11                // ..~.........'.*.........'.~....
        // smlatt r6, r6, r12, r14        // ....~.......'...*.......'...~..
        // smuadx r5, r4, r5              // ...........e'..........~'......
        // mul r5, r5, r11                // .~..........'*..........'~.....
        // smlatt r5, r5, r12, r14        // ...~........'..*........'..~...
        // pkhtb r5, r5, r6, asr #16      // ......~.....'.....*.....'......
        // str.w r5, [r0], #width         // .......~....'......*....'......
        // smuad r6, r7, r9               // ......e.....'.....~.....'......
        // mul r6, r6, r11                // ........e...'.......~...'......
        // smlatt r6, r6, r12, r14        // ..........e.'.........~.'......
        // smuadx r8, r7, r8              // .....e......'....~......'....~.
        // mul r8, r8, r11                // .......e....'......~....'......
        // smlatt r8, r8, r12, r14        // .........e..'........~..'......
        // pkhtb r8, r8, r6, asr #16      // .~..........'*..........'~.....
        // str.w r8, [r0], #width         // ...........~'..........*'......

        cmp r0, r10
        bne _asymmetric_mul_16_loop
                                         // Instructions:    9
                                         // Expected cycles: 9
                                         // Expected IPC:    1.00
                                         //
                                         // Wall time:     0.02s
                                         // User time:     0.02s
                                         //
                                         // ----- cycle (expected) ------>
                                         // 0                        25
                                         // |------------------------|----
        smuad r5, r6, r7                 // *.............................
        mul r7, r8, r11                  // .*............................
        mul r8, r5, r11                  // ..*...........................
        smlatt r6, r7, r12, r14          // ...*..........................
        smlatt r8, r8, r12, r14          // ....*.........................
        pkhtb r7, r9, r4, asr #16        // .....*........................
        pkhtb r5, r6, r8, asr #16        // ......*.......................
        str.w r5, [r0], #width           // ......*.......................
        str.w r7, [r0], #width           // ........*.....................

                                          // ------ cycle (expected) ------>
                                          // 0                        25
                                          // |------------------------|-----
        // smuad r6, r6, r7               // *..............................
        // mul r7, r8, r11                // .*.............................
        // pkhtb r8, r9, r4, asr #16      // .....*.........................
        // mul r6, r6, r11                // ..*............................
        // smlatt r7, r7, r12, r14        // ...*...........................
        // smlatt r6, r6, r12, r14        // ....*..........................
        // pkhtb r5, r7, r6, asr #16      // ......*........................
        // str.w r5, [r0], #width         // ......*........................
        // str.w r8, [r0], #width         // ........*......................


    pop.w {r4-r11, pc}