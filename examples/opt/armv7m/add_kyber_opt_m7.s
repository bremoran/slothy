.syntax unified
.cpu cortex-m4
.thumb

.align 2
.global pointwise_add_opt_m7
.type pointwise_add_opt_m7, %function
pointwise_add_opt_m7:
  push {r4-r11, lr}

  movw r14, #25
  1:
        pointwise_add_loop_start:
                                   // Instructions:    21
                                   // Expected cycles: 11
                                   // Expected IPC:    1.91
                                   //
                                   // Cycle bound:     11.0
                                   // IPC bound:       1.91
                                   //
                                   // Wall time:     0.18s
                                   // User time:     0.18s
                                   //
                                   // ----- cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|----
        ldr r11, [r1, #16]         // *.............................
        ldr r9, [r2, #16]          // *.............................
        uadd16 r11, r11, r9        // .*............................
        str r11, [r0, #16]         // .*............................
        ldr r4, [r1, #12]          // ..*...........................
        ldr r11, [r1, #8]          // ..*...........................
        ldr r10, [r2, #4]          // ...*..........................
        ldr r9, [r1, #4]           // ...*..........................
        uadd16 r5, r9, r10         // ....*.........................
        str r5, [r0, #4]           // ....*.........................
        ldr r7, [r1], #20          // .....*........................
        ldr r3, [r2, #8]           // .....*........................
        uadd16 r11, r11, r3        // ......*.......................
        str r11, [r0, #8]          // ......*.......................
        ldr r3, [r2, #12]          // .......*......................
        ldr r10, [r2], #20         // .......*......................
        uadd16 r3, r4, r3          // ........*.....................
        str r3, [r0, #12]          // ........*.....................
        uadd16 r6, r7, r10         // .........*....................
        str r6, [r0], #20          // ..........*...................
        subs.w r14, #1             // ..........*...................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // ldr r7, [r1, #16]       // *..............................
        // ldr r6, [r1, #12]       // ..*............................
        // ldr r5, [r1, #8]        // ..*............................
        // ldr r4, [r1, #4]        // ...*...........................
        // ldr r3, [r1], #20       // .....*.........................
        // ldr r12, [r2, #16]      // *..............................
        // ldr r11, [r2, #12]      // .......*.......................
        // ldr r10, [r2, #8]       // .....*.........................
        // ldr r9, [r2, #4]        // ...*...........................
        // ldr r8, [r2], #20       // .......*.......................
        // uadd16 r3, r3, r8       // .........*.....................
        // uadd16 r4, r4, r9       // ....*..........................
        // uadd16 r5, r5, r10      // ......*........................
        // uadd16 r6, r6, r11      // ........*......................
        // uadd16 r7, r7, r12      // .*.............................
        // str r7, [r0, #16]       // .*.............................
        // str r6, [r0, #12]       // ........*......................
        // str r5, [r0, #8]        // ......*........................
        // str r4, [r0, #4]        // ....*..........................
        // str r3, [r0], #20       // ..........*....................
        // subs.w r14, #1          // ..........*....................

        pointwise_add_loop_end:


  bne.w 1b

  ldm r1!, {r3-r5}
  ldm r2!, {r8-r10}
  uadd16 r3, r3, r8
  uadd16 r4, r4, r9
  uadd16 r5, r5, r10
  stm r0!, {r3-r5}
  pop {r4-r11, pc}
