.syntax unified
.cpu cortex-m4
.thumb

// void basemul_asm_opt_16_32(int32_t *, const int16_t *, const int16_t *, const int16_t *)
.global basemul_asm_opt_16_32_opt_m7
.type basemul_asm_opt_16_32_opt_m7, %function
.align 2
basemul_asm_opt_16_32_opt_m7:
  push {r4-r11, lr}

  rptr_tmp  .req r0
  aptr      .req r1
  bptr      .req r2
  aprimeptr .req r3
  poly0     .req r4
  poly1     .req r6
  poly2     .req r5
  poly3     .req r7
  q         .req r8
  qa        .req r9
  qinv      .req r10
  tmp       .req r11
  tmp2      .req r12
  loop      .req r14

  // movw qa, #26632
 // movt  q, #3329
 ### qinv=0x6ba8f301
 // movw qinv, #62209
 // movt qinv, #27560

  movw loop, #64
                                  // Instructions:    4
                                  // Expected cycles: 3
                                  // Expected IPC:    1.33
                                  //
                                  // Cycle bound:     3.0
                                  // IPC bound:       1.33
                                  //
                                  // Wall time:     0.04s
                                  // User time:     0.04s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        ldr r11, [r2], #4         // *.............................
        ldr.w r9, [r3, #4]        // .*............................
        ldr r10, [r3], #8         // .*............................
        ldr r7, [r2], #4          // ..*...........................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // ldr r11, [r2], #4       // *..............................
        // ldr.w r9, [r3, #4]      // .*.............................
        // ldr r10, [r3], #8       // .*.............................
        // ldr r7, [r2], #4        // ..*............................

        sub loop, loop, #1
1:
                                  // Instructions:    14
                                  // Expected cycles: 8
                                  // Expected IPC:    1.75
                                  //
                                  // Cycle bound:     11.0
                                  // IPC bound:       1.27
                                  //
                                  // Wall time:     2.79s
                                  // User time:     2.79s
                                  //
                                  // ----- cycle (expected) ------>
                                  // 0                        25
                                  // |------------------------|----
        ldr r6, [r1], #4          // *.............................
        smuad r5, r10, r11        // .*............................
        str r5, [r0], #4          // .*............................
        smuadx r5, r6, r11        // ..*...........................
        ldr r6, [r1], #4          // ..*...........................
        str r5, [r0], #4          // ...*..........................
        ldr r11, [r2], #4         // ...e..........................
        smuad r4, r9, r7          // ....*.........................
        ldr.w r9, [r3, #4]        // ....e.........................
        str r4, [r0], #4          // .....*........................
        smuadx r5, r6, r7         // ......*.......................
        ldr r10, [r3], #8         // ......e.......................
        ldr r7, [r2], #4          // .......e......................
        str r5, [r0], #4          // .......*......................

                                    // ------ cycle (expected) ------>
                                    // 0                        25
                                    // |------------------------|-----
        // ldr r4, [r1], #4         // .....*.......~.......~.......~.
        // ldr r6, [r2], #4         // e....'..~....'..~....'..~....'.
        // ldr r5, [r1], #4         // .....'.*.....'.~.....'.~.....'.
        // ldr r7, [r2], #4         // ....e'......~'......~'......~'.
        // ldr.w r11, [r3, #4]      // .e...'...~...'...~...'...~...'.
        // ldr r12, [r3], #8        // ...e.'.....~.'.....~.'.....~.'.
        // smuad r12, r12, r6       // .....'*......'~......'~......'.
        // str r12, [r0], #4        // .....'*......'~......'~......'.
        // smuadx r12, r4, r6       // .....'.*.....'.~.....'.~.....'.
        // str r12, [r0], #4        // ~....'..*....'..~....'..~....'.
        // smuad r12, r11, r7       // .~...'...*...'...~...'...~...'.
        // str r12, [r0], #4        // ..~..'....*..'....~..'....~..'.
        // smuadx r12, r5, r7       // ...~.'.....*.'.....~.'.....~.'.
        // str r12, [r0], #4        // ....~'......*'......~'......~'.

        subs loop, #1
        bne 1b
                                   // Instructions:    10
                                   // Expected cycles: 8
                                   // Expected IPC:    1.25
                                   //
                                   // Cycle bound:     8.0
                                   // IPC bound:       1.25
                                   //
                                   // Wall time:     0.26s
                                   // User time:     0.26s
                                   //
                                   // ----- cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|----
        smuad r5, r10, r11         // *.............................
        ldr r10, [r1], #4          // *.............................
        smuad r6, r9, r7           // .*............................
        str r5, [r0], #4           // .*............................
        smuadx r8, r10, r11        // ..*...........................
        ldr r11, [r1], #4          // ..*...........................
        str r8, [r0], #4           // ...*..........................
        smuadx r5, r11, r7         // ....*.........................
        str r6, [r0], #4           // .....*........................
        str r5, [r0], #4           // .......*......................

                                   // ------ cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|-----
        // ldr r6, [r1], #4        // *..............................
        // smuad r5, r10, r11      // *..............................
        // str r5, [r0], #4        // .*.............................
        // smuadx r5, r6, r11      // ..*............................
        // ldr r6, [r1], #4        // ..*............................
        // str r5, [r0], #4        // ...*...........................
        // smuad r4, r9, r7        // .*.............................
        // str r4, [r0], #4        // .....*.........................
        // smuadx r5, r6, r7       // ....*..........................
        // str r5, [r0], #4        // .......*.......................


  pop {r4-r11, pc}
