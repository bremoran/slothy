.syntax unified
.cpu cortex-m4
.thumb

// void basemul_asm_opt_16_32(int32_t *, const int16_t *, const int16_t *, const int16_t *)
.global basemul_asm_opt_16_32_opt_m7
.type basemul_asm_opt_16_32_opt_m7, %function
.align 2
basemul_asm_opt_16_32_opt_m7:
  push {r4-r11, lr}

  rptr_tmp  .req r0
  aptr      .req r1
  bptr      .req r2
  aprimeptr .req r3
  poly0     .req r4
  poly1     .req r6
  poly2     .req r5
  poly3     .req r7
  q         .req r8
  qa        .req r9
  qinv      .req r10
  tmp       .req r11
  tmp2      .req r12
  loop      .req r14

  // movw qa, #26632
 // movt  q, #3329
 ### qinv=0x6ba8f301
 // movw qinv, #62209
 // movt qinv, #27560

  movw loop, #64
  1:
        basemul_asm_opt_16_32_loop_start:
                                   // Instructions:    15
                                   // Expected cycles: 10
                                   // Expected IPC:    1.50
                                   //
                                   // Wall time:     0.04s
                                   // User time:     0.04s
                                   //
                                   // ----- cycle (expected) ------>
                                   // 0                        25
                                   // |------------------------|----
        ldr r9, [r2], #4           // *.............................
        ldr r6, [r1], #4           // *.............................
        ldr.w r12, [r3, #4]        // .*............................
        ldr r8, [r3], #8           // .*............................
        ldr r10, [r2], #4          // ..*...........................
        ldr r5, [r1], #4           // ..*...........................
        smuad r8, r8, r9           // ...*..........................
        str r8, [r0], #4           // ...*..........................
        smuadx r9, r6, r9          // ....*.........................
        str r9, [r0], #4           // .....*........................
        smuad r9, r12, r10         // ......*.......................
        str r9, [r0], #4           // .......*......................
        smuadx r9, r5, r10         // ........*.....................
        subs.w r14, #1             // .........*....................
        str r9, [r0], #4           // .........*....................

                                    // ------ cycle (expected) ------>
                                    // 0                        25
                                    // |------------------------|-----
        // ldr r4, [r1], #4         // *..............................
        // ldr r6, [r2], #4         // *..............................
        // ldr r5, [r1], #4         // ..*............................
        // ldr r7, [r2], #4         // ..*............................
        // ldr.w r11, [r3, #4]      // .*.............................
        // ldr r12, [r3], #8        // .*.............................
        // smuad r12, r12, r6       // ...*...........................
        // str r12, [r0], #4        // ...*...........................
        // smuadx r12, r4, r6       // ....*..........................
        // str r12, [r0], #4        // .....*.........................
        // smuad r12, r11, r7       // ......*........................
        // str r12, [r0], #4        // .......*.......................
        // smuadx r12, r5, r7       // ........*......................
        // str r12, [r0], #4        // .........*.....................
        // subs.w r14, #1           // .........*.....................

        basemul_asm_opt_16_32_loop_end:

  bne.w 1b

  pop {r4-r11, pc}
